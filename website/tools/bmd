#!/usr/bin/env bash
#
# Parse markdown and make it pretty on the terminal with pure bash
#
# THIS SCRIPT IS HIGHLY-OPIONATED AND DOESN'T FULLY PARSE MARKDOWN SYNTAX! this
# was written with the sole-purpose of being able to prettify my bash style
# guide https://github.com/bahamas10/bash-style-guide and make it available on
# the terminal for users.
#
# This program does all of its parsing in pure bash but does fork out to `bat`
# for code syntax highlighting.  This program does NOT check if your output is a
# TTY and instead always opts to output color.
#
# Author: Dave Eddy <dave@daveeddy.com>
# Date: May 18, 2025
# License: MIT

# this should match the theme of my website ysap.sh
# https://github.com/bahamas10/ysap/blob/main/website/theme
COLOR1=$'\x1b[38;5;87m'   # cyan
COLOR2=$'\x1b[38;5;211m'  # magenta
COLOR3=$'\x1b[38;5;120m'  # green
COLOR4=$'\x1b[38;5;241m'  # dim
COLOR5=$'\x1b[38;5;223m'  # off-white (text)
RST=$'\x1b[0m'

BOLD=$'\x1b[1m'
BOLDOFF=$'\x1b[22m'
ITALICS=$'\x1b[3m'
ITALICSOFF=$'\x1b[23m'

fatal() {
	echo FATAL "$@" >&2
	exit 1
}

trace() {
	((verbosity >= 2)) && echo '>' "$*" >&2
}

debug() {
	((verbosity >= 1)) && echo '>>' "$*" >&2
}

# left-pad stdin
lpad() {
	local s=$1
	local line
	while IFS= read -r line; do
		echo "$s$line"
	done
}

# format code using `bat`
format-code-block() {
	local lang=$1

	local args=(bat -Pp --color always --theme 'base16')
	if [[ -n $lang ]]; then
		args+=(--language "$lang")
	fi
	args+=('-')

	debug "formatting code (lang=$lang): " "${args[@]}"
	"${args[@]}" | ./tools/box -bc "$COLOR4" -hp 1 -vp 1
}

# format hr
format-horizontal-rule() {
	local c='─'
	local n=80
	local s
	printf -v s "%${n}s" ' '
	echo "$COLOR4${s// /$c}$RST"
}

# format h[1-6]
format-header() {
	local level=$1
	local text=$2

	local output=$BOLD$COLOR3

	debug "formatting header (h$level): $text"

	case "$level" in
		1) output+='';;
		2) output+='▌ ';;
		3) output+='┃ ';;
		4) output+='│ ';;
		5) output+='┆ ';;
		6) output+='┊ ';;
		*) fatal "unknown header level: $level";;
	esac

	# handle any ticks in the title
	local c i
	local in_backticks=0
	for ((i = 0; i < ${#text}; i++)); do
		c=${text:i:1}

		if [[ $c == '`' ]]; then
			if ((in_backticks == 0)); then
				output+=$COLOR2
			else
				output+=$COLOR3
			fi
			((in_backticks ^= 1))
		else
			output+=$c
		fi
	done
	output+=$RST

	echo "$output"
}


# print the usage message
usage() {
	local prog=${0##*/}
	local msg
	read -d '' -r msg <<-EOF
	Usage: $prog [-v] [filename]

	Options:
	  -h      print this message and exit
	  -v      increase verbosity - add more for more output
	EOF
	echo "$msg"
}

verbosity=0
while getopts 'hv' opt; do
	case "$opt" in
		h) usage; exit 0;;
		v) ((verbosity++));;
		*) usage >&2; exit 1;;
	esac
done
shift "$((OPTIND - 1))"

code_re='^``` ?(.*)$'
header_re='^(#{1,6}) (.+)$'

# read entire file into memory
file=${1:-/dev/stdin}
mapfile -t input < "$file" || fatal 'failed to read input'

in_code_block=0
buffer=()
code_lang=
line_no=0
line=
in_backticks=0
in_bold=0
in_italics=0
in_link_text=0
in_link_url=0
for ((i = 0; i < ${#input[@]}; i++)); do
	((line_no = i + 1))
	trace "processing line $line_no"

	line=${input[i]}
	next_line=${input[i + 1]}

	# check for code block
	if [[ $line =~ $code_re ]]; then
		if ((in_code_block == 0)); then
			# started to read code
			buffer=()
			code_lang=${BASH_REMATCH[1]}
			trace "starting code block (lang=$code_lang)"
		else
			# we finished reading code
			trace "finished code block"
			printf '%s\n' "${buffer[@]}" | format-code-block "$code_lang"

		fi

		((in_code_block ^= 1))
		continue
	elif ((in_code_block == 1)); then
		buffer+=("$line")
		continue
	fi

	# check for headers - look for alternative syntax first as it requires
	# look-ahead
	if [[ -n $line && ${next_line:0:2} == '==' ]]; then
		format-header 1 "$line"
		((i++))
		continue
	elif [[ -n $line && ${next_line:0:2} == '--' ]]; then
		format-header 2 "$line"
		((i++))
		continue
	elif [[ $line =~ $header_re ]]; then
		# parse basic syntax
		octos=${BASH_REMATCH[1]}
		text=${BASH_REMATCH[2]}
		format-header "${#octos}" "$text"
		continue
	fi

	# check for horizontal rule
	if [[ $line == '---' ]]; then
		format-horizontal-rule
		continue
	fi

	# if we are here let's just assume it's basic text
	output=$COLOR5
	if ((in_backticks == 1)); then
		output+=$COLOR2
	fi
	if ((in_bold == 1)); then
		output+=$BOLD
	fi
	if ((in_italics == 1)); then
		output+=$ITALICS
	fi

	if ((in_link_text == 1)); then
		output+=$COLOR1
	elif ((in_link_url == 1)); then
		output+=$COLOR2
	fi
	for ((j = 0; j < ${#line}; j++)); do
		c0=${line:j-1:1}
		c=${line:j:1}
		c2=${line:j+1:1}

		if [[ $c == '`' ]]; then
			if ((in_backticks == 0)); then
				output+=$COLOR2
			else
				output+=$COLOR5
			fi
			((in_backticks ^= 1))
			continue
		fi
		if ((in_backticks == 1)); then
			output+=$c
			continue
		fi

		if [[ $c == '[' ]]; then
			in_link_text=1
			output+=$COLOR1
		elif [[ $c == ']' ]]; then
			output+=' '
		elif ((in_link_text == 1)) && [[ $c == '(' ]]; then
			in_link_text=0
			in_link_url=1
			output+=$COLOR2$c
		elif ((in_link_url == 1)) && [[ $c == ')' ]]; then
			in_link_url=0
			output+=$c$COLOR5
		elif ((in_link_url == 1)); then
			output+=$c
		elif [[ $c$c2 == '**' || $c$c2 == '__' ]]; then
			if ((in_bold == 0)); then
				output+=$BOLD
			else
				output+=$BOLDOFF
			fi
			((in_bold ^= 1))
			((j++))
		elif [[ $c == '*' && $c0 != "\\" ]] ||
		     [[ $c == '_' && $c0 != "\\" ]]; then
			if ((in_italics == 0)); then
				output+=$ITALICS
			else
				output+=$ITALICSOFF
			fi
			((in_italics ^= 1))
		else
			output+=$c
		fi
	done
	output+=$RST
	echo "$output"
done
